services:
  service-order-create:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: db-system-car
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  automotive-mock-service:
    image: clue/json-server
    container_name: automotive-mock-service
    volumes:
      - ./mock-data:/data
    environment:
      JSON_SERVER_PORT: 3000
    ports:
      - "3000:3000"
    networks:
      - backend

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-system-car
    depends_on:
      postgres:
        condition: service_started
      automotive-mock-service:
        condition: service_started
      service-order-create:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/db-system-car
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_HOST: service-order-create
      RABBITMQ_PORT: 5672
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge